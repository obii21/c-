using System;
// Base class
class Shape
{
public virtual void Draw()
{
Console.WriteLine("Drawing a shape");
}
public virtual void Erase()
{
Console.WriteLine("Erasing a shape");
}
}
// Derived class: Circle
class Circle : Shape
{
public override void Draw()
{
Console.WriteLine("Drawing a circle");
}
public override void Erase()
{
Console.WriteLine("Erasing a circle");
}
}
// Derived class: Triangle
class Triangle : Shape
{
public override void Draw()
{
Console.WriteLine("Drawing a triangle");
}
public override void Erase()
{
Console.WriteLine("Erasing a triangle");
}
}
// Derived class: Square
class Square : Shape
{
public override void Draw()
{
Console.WriteLine("Drawing a square");
}
public override void Erase()
{
Console.WriteLine("Erasing a square");
}
}
class Program
{
static void Main()
{
// Demonstrate polymorphism
Shape[] shapes = new Shape[]
{
new Circle(), new Triangle(), new Square()
};
Console.WriteLine("Demonstrating Polymorphism:");
foreach (Shape shape in shapes)
{
shape.Draw();
shape.Erase();
Console.WriteLine(); // Separate output for each shape
}
}
}
Output :- Demonstrating Polymorphism:
Drawing a circle
Erasing a circle
Drawing a triangle
Erasing a triangle
Drawing a square
Erasing a square
