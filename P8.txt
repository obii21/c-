using System;
class Stack
{
private const int MAX_SIZE = 100; // You can adjust the maximum size of the stack
private int[] stackArray;
private int top;
public Stack()
{
stackArray = new int[MAX_SIZE];
top = -1;
}
// Property to get the current size of the stack
public int Size
{
get { return top + 1; }
}
// Method to push an element onto the stack
public void Push(int value)
{
if (top == MAX_SIZE - 1)
{
Console.WriteLine("Stack Overflow! Cannot push element onto the stack.");
}
else
{
top++;
stackArray[top] = value;
Console.WriteLine($"Pushed {value} onto the stack.");
}
}
// Method to pop an element from the stack
public int Pop()
{
if (top == -1)
{
Console.WriteLine("Stack Underflow! Cannot pop element from an empty stack.");
return -1; // You can choose a different value to indicate an error condition
}
else
{
int poppedValue = stackArray[top];
top--;
Console.WriteLine($"Popped {poppedValue} from the stack.");
return poppedValue;
}
}
}
class Program
{
static void Main()
{
// Create an instance of the Stack class
Stack myStack = new Stack();
// Push some elements onto the stack
myStack.Push(10);
myStack.Push(20);
myStack.Push(30);
// Pop elements from the stack
int poppedValue1 = myStack.Pop();
int poppedValue2 = myStack.Pop();
Console.WriteLine($"Current size of the stack: {myStack.Size}");
// Pop from an empty stack
int poppedValue3 = myStack.Pop();
Console.ReadLine();
}
}
Output :- Pushed 10 onto the stack. Pushed 20 onto the stack. Pushed 30 onto the stack. Popped 30 from the stack.
Popped 20 from the stack. Current size of the stack: 1
Popped 10 from the stack